"""
FastAPI application with routes.
"""
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from typing import List

from settings import settings
from models.plato import Plato

app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description=settings.DESCRIPTION
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# In-memory database to store dishes
platos_db: List[Plato] = [
    Plato(name="Pasta Carbonara", precio=12.50),
    Plato(name="Ensalada CÃ©sar", precio=8.75),
    Plato(name="Sopa de Tomate", precio=6.25)
]

@app.get("/")
async def root():
    """Root endpoint."""
    return {
        "message": "Welcome to FastAPI Simple Project",
        "version": settings.VERSION
    }

@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {"status": "healthy"}

@app.get("/users")
async def get_users():
    """Get users endpoint."""
    return {"users": ["user1", "user2", "user3"]}

@app.post("/users")
async def create_user(name: str):
    """Create user endpoint."""
    return {"message": f"User {name} created successfully"}


# ===== CRUD ENDPOINTS FOR DISH =====

@app.post("/platos", response_model=Plato, status_code=201)
async def create_plato(plato: Plato):
    """Create a new dish."""
    # ID is automatically generated by the model
    platos_db.append(plato)
    return plato


@app.get("/platos", response_model=List[Plato])
async def get_platos():
    """Get list of all dishes."""
    return platos_db


@app.get("/platos/{plato_id}", response_model=Plato)
async def get_plato(plato_id: str):
    """Get a specific dish by ID."""
    for plato in platos_db:
        if plato.id == plato_id:
            return plato
    raise HTTPException(status_code=404, detail="Dish not found")


@app.put("/platos/{plato_id}", response_model=Plato)
async def update_plato(plato_id: str, plato_update: Plato):
    """Update an existing dish."""
    for i, plato in enumerate(platos_db):
        if plato.id == plato_id:
            # Keep the original ID
            plato_update.id = plato_id
            platos_db[i] = plato_update
            return plato_update
    raise HTTPException(status_code=404, detail="Dish not found")


@app.delete("/platos/{plato_id}")
async def delete_plato(plato_id: str):
    """Delete a dish."""
    for i, plato in enumerate(platos_db):
        if plato.id == plato_id:
            deleted_plato = platos_db.pop(i)
            return {"message": f"Dish '{deleted_plato.name}' deleted successfully"}
    raise HTTPException(status_code=404, detail="Dish not found")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host=settings.HOST, port=settings.PORT)